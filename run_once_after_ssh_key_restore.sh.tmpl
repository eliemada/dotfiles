#!/bin/bash
set -euo pipefail
DB="{{ .keepassdb }}"

# Check if KeePassXC CLI is available
if ! command -v keepassxc-cli &> /dev/null; then
    echo "Error: keepassxc-cli not found. Please install KeePassXC."
    exit 1
fi

# Check if database file exists
if [ ! -f "$DB" ]; then
    echo "Error: KeePassXC database not found at $DB"
    exit 1
fi

# Create a temporary environment variable to store the password
# This avoids having to enter it multiple times
read -s -p "Enter KeePassXC password (will not be echoed): " KEEPASS_PASSWORD
echo

# Validate password by testing database access
if ! echo "$KEEPASS_PASSWORD" | keepassxc-cli ls -q "$DB" &> /dev/null; then
    echo "Error: Invalid password or unable to access database"
    unset KEEPASS_PASSWORD
    exit 1
fi

# Helper function using the stored password
dump_key() {
    local ENTRY="$1"
    local FILENAME="$2"

    echo "Dumping key for $ENTRY → ~/.ssh/$FILENAME"

    # Check if entry exists
    if ! echo "$KEEPASS_PASSWORD" | keepassxc-cli show -q -s "$DB" "$ENTRY" &> /dev/null; then
        echo "Warning: Entry '$ENTRY' not found in database, skipping..."
        return 1
    fi

    # Extract private key
    if echo "$KEEPASS_PASSWORD" | keepassxc-cli show -q -s "$DB" "$ENTRY" --attributes SSHPrivateKey > "$HOME/.ssh/$FILENAME" 2>/dev/null; then
        chmod 600 "$HOME/.ssh/$FILENAME"
        echo "  ✓ Private key extracted"
    else
        echo "  ✗ Failed to extract private key"
        return 1
    fi

    # Check if public key exists before trying to extract it
    if echo "$KEEPASS_PASSWORD" | keepassxc-cli show -q -s "$DB" "$ENTRY" --attributes SSHPublicKey &> /dev/null; then
        if echo "$KEEPASS_PASSWORD" | keepassxc-cli show -q -s "$DB" "$ENTRY" --attributes SSHPublicKey > "$HOME/.ssh/$FILENAME.pub" 2>/dev/null; then
            chmod 644 "$HOME/.ssh/$FILENAME.pub"
            echo "  ✓ Public key extracted"
        else
            echo "  ✗ Failed to extract public key"
        fi
    else
        echo "  ⚠ No public key found for this entry"
    fi

    # Add key to ssh-agent if available
    if command -v ssh-add &> /dev/null && [ -n "${SSH_AUTH_SOCK:-}" ]; then
        if ssh-add "$HOME/.ssh/$FILENAME" 2>/dev/null; then
            echo "  ✓ Key added to ssh-agent"
        else
            echo "  ⚠ Failed to add key to ssh-agent"
        fi
    fi
}

mkdir -p "$HOME/.ssh"

# Restore SSH keys
echo "Starting SSH key restoration..."
dump_key "config/ssh/github.com" "id_ed25519_github"
dump_key "config/ssh/gitlab.epfl.ch" "id_ed25519_gitlab_epfl"

# Clear the password from memory
unset KEEPASS_PASSWORD
echo "SSH key restoration completed."
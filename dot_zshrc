
# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

export DEFAULT_USER="${USER}"
export ZSH_AUTOSUGGEST_USE_ASYNC=true
export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE="20"
# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="powerlevel10k/powerlevel10k"
# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
HIST_STAMPS="yyyy-mm-dd"

setopt HIST_IGNORE_SPACE

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

for file in $(find ~/.shrc.d -name '*.sh.pre' -type f) ; do 
  source "$file" ;
done

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(\
    colored-man-pages \
    git-auto-fetch \
    dotenv \
    zsh-autosuggestions \
    zsh-syntax-highlighting \
    git \
)

add_plugin() {
    if which "${1}" > /dev/null 2>&1 ; then plugins+=("${1}") ; fi
}

add_plugin tmux
add_plugin npm
add_plugin docker
add_plugin git
add_plugin pip
add_plugin npm


# PYENV
if [[ -d "$PYENV_ROOT" ]] ; then
    prepend_path "$PYENV_ROOT"/bin
    plugins+=(pyenv) 
    eval "$(pyenv init -)"
fi

# NVM
if [[ -d "$NVM_DIR" ]] ; then
    . "$NVM_DIR/nvm.sh"
    plugins+=(nvm)
    if [[ -f "$HOME/.nvmrc" ]] ; then nvm use > /dev/null ; fi 
fi

# Note that zsh-syntax-highlighting must be the last plugin sourced.
plugins+=(zsh-syntax-highlighting)

# Enable Oh My Zsh after selecting all the plugins
source $ZSH/oh-my-zsh.sh

# Oh My Posh must be enabled after oh-my-zsh to ensure correct working
# if command oh-my-posh > /dev/null 2>&1 ; then
#     eval "$(oh-my-posh init zsh --config ~/.config/omp/config.toml)"
# else
#     echo "oh-my-posh not found"
# fi

# for file in $(find ~/.shrc.d -name '*.sh' -type f) ; do 
#   source "$file" ;
# done

# Usung Starship as a prompt
if command -v starship > /dev/null 2>&1; then
  export STARSHIP_CONFIG="$HOME/.config/starship/starship.toml"
  eval "$(starship init zsh)"
else
  echo "starship not found, see https://starship.rs"
fi


# Enable Python version management.
if command -v pyenv > /dev/null; then
    eval "$(pyenv init -)"
fi

# Point ripgrep to its configuration file.
# See https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md
export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"


# Includes
# -----------------------------------------------------------------------------

# Load cross-compatible Bash functions declarations from separate file.
if [ -f "$HOME"/.bash_functions ]; then
    \. "$HOME"/.bash_functions
fi

# Load cross-compatible Bash alias definitions from separate file.
if [ -f "$HOME"/.bash_aliases ]; then
    \. "$HOME"/.bash_aliases
fi

# Load cross-compatible Bash custom code from separate file.
if [ -f "$HOME"/.bash_extras ]; then
    \. "$HOME"/.bash_extras
fi

export PYTHONSTARTUP="$HOME/.pythonrc"